-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity kernel_wrapper_normalize_array_ap_fixed_42u_array_ap_fixed_16_6_5_3_0_42u_config17_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    layer15_out_dout : IN STD_LOGIC_VECTOR (671 downto 0);
    layer15_out_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    layer15_out_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    layer15_out_empty_n : IN STD_LOGIC;
    layer15_out_read : OUT STD_LOGIC;
    layer17_out_din : OUT STD_LOGIC_VECTOR (671 downto 0);
    layer17_out_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    layer17_out_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    layer17_out_full_n : IN STD_LOGIC;
    layer17_out_write : OUT STD_LOGIC );
end;


architecture behav of kernel_wrapper_normalize_array_ap_fixed_42u_array_ap_fixed_16_6_5_3_0_42u_config17_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv26_69F : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000011010011111";
    constant ap_const_lv26_589 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000010110001001";
    constant ap_const_lv26_57D : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000010101111101";
    constant ap_const_lv26_4DA : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000010011011010";
    constant ap_const_lv26_523 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000010100100011";
    constant ap_const_lv26_53D : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000010100111101";
    constant ap_const_lv26_541 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000010101000001";
    constant ap_const_lv26_56A : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000010101101010";
    constant ap_const_lv26_621 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000011000100001";
    constant ap_const_lv26_584 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000010110000100";
    constant ap_const_lv26_4BC : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000010010111100";
    constant ap_const_lv26_502 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000010100000010";
    constant ap_const_lv26_6C4 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000011011000100";
    constant ap_const_lv26_5A1 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000010110100001";
    constant ap_const_lv26_5A9 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000010110101001";
    constant ap_const_lv26_532 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000010100110010";
    constant ap_const_lv26_659 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000011001011001";
    constant ap_const_lv26_4F8 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000010011111000";
    constant ap_const_lv26_5F6 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000010111110110";
    constant ap_const_lv26_51C : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000010100011100";
    constant ap_const_lv26_521 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000010100100001";
    constant ap_const_lv26_5DB : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000010111011011";
    constant ap_const_lv26_470 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000010001110000";
    constant ap_const_lv26_607 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000011000000111";
    constant ap_const_lv26_5D3 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000010111010011";
    constant ap_const_lv26_50B : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000010100001011";
    constant ap_const_lv26_51D : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000010100011101";
    constant ap_const_lv26_67D : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000011001111101";
    constant ap_const_lv26_5A2 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000010110100010";
    constant ap_const_lv26_697 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000011010010111";
    constant ap_const_lv26_6EE : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000011011101110";
    constant ap_const_lv26_41F : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000010000011111";
    constant ap_const_lv26_614 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000011000010100";
    constant ap_const_lv26_51E : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000010100011110";
    constant ap_const_lv26_572 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000010101110010";
    constant ap_const_lv26_519 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000010100011001";
    constant ap_const_lv26_65C : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000011001011100";
    constant ap_const_lv26_527 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000010100100111";
    constant ap_const_lv26_666 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000011001100110";
    constant ap_const_lv26_578 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000010101111000";
    constant ap_const_lv26_48E : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000010010001110";
    constant ap_const_lv26_5ED : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000010111101101";
    constant ap_const_lv32_280 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001010000000";
    constant ap_const_lv32_28F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001010001111";
    constant ap_const_lv32_290 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001010010000";
    constant ap_const_lv32_29F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001010011111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_6F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101111";
    constant ap_const_lv32_70 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv32_8F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001111";
    constant ap_const_lv32_90 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010000";
    constant ap_const_lv32_9F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011111";
    constant ap_const_lv32_A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100000";
    constant ap_const_lv32_AF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010101111";
    constant ap_const_lv32_B0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010110000";
    constant ap_const_lv32_BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111111";
    constant ap_const_lv32_C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000000";
    constant ap_const_lv32_CF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011001111";
    constant ap_const_lv32_D0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011010000";
    constant ap_const_lv32_DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011011111";
    constant ap_const_lv32_E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011100000";
    constant ap_const_lv32_EF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011101111";
    constant ap_const_lv32_F0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011110000";
    constant ap_const_lv32_FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111111";
    constant ap_const_lv32_100 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100000000";
    constant ap_const_lv32_10F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100001111";
    constant ap_const_lv32_110 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100010000";
    constant ap_const_lv32_11F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100011111";
    constant ap_const_lv32_120 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100100000";
    constant ap_const_lv32_12F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100101111";
    constant ap_const_lv32_130 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100110000";
    constant ap_const_lv32_13F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100111111";
    constant ap_const_lv32_140 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101000000";
    constant ap_const_lv32_14F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101001111";
    constant ap_const_lv32_150 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101010000";
    constant ap_const_lv32_15F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101011111";
    constant ap_const_lv32_160 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101100000";
    constant ap_const_lv32_16F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101101111";
    constant ap_const_lv32_170 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101110000";
    constant ap_const_lv32_17F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101111111";
    constant ap_const_lv32_180 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110000000";
    constant ap_const_lv32_18F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110001111";
    constant ap_const_lv32_190 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110010000";
    constant ap_const_lv32_19F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110011111";
    constant ap_const_lv32_1A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110100000";
    constant ap_const_lv32_1AF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110101111";
    constant ap_const_lv32_1B0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110110000";
    constant ap_const_lv32_1BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110111111";
    constant ap_const_lv32_1C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111000000";
    constant ap_const_lv32_1CF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111001111";
    constant ap_const_lv32_1D0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111010000";
    constant ap_const_lv32_1DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111011111";
    constant ap_const_lv32_1E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111100000";
    constant ap_const_lv32_1EF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111101111";
    constant ap_const_lv32_1F0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111110000";
    constant ap_const_lv32_1FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111111111";
    constant ap_const_lv32_200 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000000000";
    constant ap_const_lv32_20F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000001111";
    constant ap_const_lv32_210 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000010000";
    constant ap_const_lv32_21F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000011111";
    constant ap_const_lv32_220 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000100000";
    constant ap_const_lv32_22F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000101111";
    constant ap_const_lv32_230 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000110000";
    constant ap_const_lv32_23F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000111111";
    constant ap_const_lv32_240 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001001000000";
    constant ap_const_lv32_24F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001001001111";
    constant ap_const_lv32_250 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001001010000";
    constant ap_const_lv32_25F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001001011111";
    constant ap_const_lv32_260 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001001100000";
    constant ap_const_lv32_26F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001001101111";
    constant ap_const_lv32_270 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001001110000";
    constant ap_const_lv32_27F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001001111111";
    constant ap_const_lv26_21C00 : STD_LOGIC_VECTOR (25 downto 0) := "00000000100001110000000000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv26_3FA9C00 : STD_LOGIC_VECTOR (25 downto 0) := "11111110101001110000000000";
    constant ap_const_lv26_BFC00 : STD_LOGIC_VECTOR (25 downto 0) := "00000010111111110000000000";
    constant ap_const_lv26_4E800 : STD_LOGIC_VECTOR (25 downto 0) := "00000001001110100000000000";
    constant ap_const_lv26_2BC00 : STD_LOGIC_VECTOR (25 downto 0) := "00000000101011110000000000";
    constant ap_const_lv26_1C00 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000001110000000000";
    constant ap_const_lv26_62000 : STD_LOGIC_VECTOR (25 downto 0) := "00000001100010000000000000";
    constant ap_const_lv26_49800 : STD_LOGIC_VECTOR (25 downto 0) := "00000001001001100000000000";
    constant ap_const_lv26_3F99400 : STD_LOGIC_VECTOR (25 downto 0) := "11111110011001010000000000";
    constant ap_const_lv26_3FFD000 : STD_LOGIC_VECTOR (25 downto 0) := "11111111111101000000000000";
    constant ap_const_lv26_3E96800 : STD_LOGIC_VECTOR (25 downto 0) := "11111010010110100000000000";
    constant ap_const_lv26_9E400 : STD_LOGIC_VECTOR (25 downto 0) := "00000010011110010000000000";
    constant ap_const_lv26_3F400 : STD_LOGIC_VECTOR (25 downto 0) := "00000000111111010000000000";
    constant ap_const_lv26_3FAEC00 : STD_LOGIC_VECTOR (25 downto 0) := "11111110101110110000000000";
    constant ap_const_lv26_3E800 : STD_LOGIC_VECTOR (25 downto 0) := "00000000111110100000000000";
    constant ap_const_lv26_3F82800 : STD_LOGIC_VECTOR (25 downto 0) := "11111110000010100000000000";
    constant ap_const_lv26_3F4FC00 : STD_LOGIC_VECTOR (25 downto 0) := "11111101001111110000000000";
    constant ap_const_lv26_3E5E000 : STD_LOGIC_VECTOR (25 downto 0) := "11111001011110000000000000";
    constant ap_const_lv26_3F0DC00 : STD_LOGIC_VECTOR (25 downto 0) := "11111100001101110000000000";
    constant ap_const_lv26_3B000 : STD_LOGIC_VECTOR (25 downto 0) := "00000000111011000000000000";
    constant ap_const_lv26_3E3D400 : STD_LOGIC_VECTOR (25 downto 0) := "11111000111101010000000000";
    constant ap_const_lv26_FE800 : STD_LOGIC_VECTOR (25 downto 0) := "00000011111110100000000000";
    constant ap_const_lv26_3F96400 : STD_LOGIC_VECTOR (25 downto 0) := "11111110010110010000000000";
    constant ap_const_lv26_3EDF800 : STD_LOGIC_VECTOR (25 downto 0) := "11111011011111100000000000";
    constant ap_const_lv26_3E70000 : STD_LOGIC_VECTOR (25 downto 0) := "11111001110000000000000000";
    constant ap_const_lv26_3F6D000 : STD_LOGIC_VECTOR (25 downto 0) := "11111101101101000000000000";
    constant ap_const_lv26_C4000 : STD_LOGIC_VECTOR (25 downto 0) := "00000011000100000000000000";
    constant ap_const_lv26_3F5FC00 : STD_LOGIC_VECTOR (25 downto 0) := "11111101011111110000000000";
    constant ap_const_lv26_F2800 : STD_LOGIC_VECTOR (25 downto 0) := "00000011110010100000000000";
    constant ap_const_lv26_3EE6000 : STD_LOGIC_VECTOR (25 downto 0) := "11111011100110000000000000";
    constant ap_const_lv26_41000 : STD_LOGIC_VECTOR (25 downto 0) := "00000001000001000000000000";
    constant ap_const_lv26_43C00 : STD_LOGIC_VECTOR (25 downto 0) := "00000001000011110000000000";
    constant ap_const_lv26_3FB8800 : STD_LOGIC_VECTOR (25 downto 0) := "11111110111000100000000000";
    constant ap_const_lv26_B400 : STD_LOGIC_VECTOR (25 downto 0) := "00000000001011010000000000";
    constant ap_const_lv26_3EB7C00 : STD_LOGIC_VECTOR (25 downto 0) := "11111010110111110000000000";
    constant ap_const_lv26_83000 : STD_LOGIC_VECTOR (25 downto 0) := "00000010000011000000000000";
    constant ap_const_lv26_3F8A800 : STD_LOGIC_VECTOR (25 downto 0) := "11111110001010100000000000";
    constant ap_const_lv26_A6000 : STD_LOGIC_VECTOR (25 downto 0) := "00000010100110000000000000";
    constant ap_const_lv26_3F12800 : STD_LOGIC_VECTOR (25 downto 0) := "11111100010010100000000000";
    constant ap_const_lv26_3F73400 : STD_LOGIC_VECTOR (25 downto 0) := "11111101110011010000000000";
    constant ap_const_lv26_94800 : STD_LOGIC_VECTOR (25 downto 0) := "00000010010100100000000000";
    constant ap_const_lv26_47000 : STD_LOGIC_VECTOR (25 downto 0) := "00000001000111000000000000";

attribute shreg_extract : string;
    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal layer15_out_blk_n : STD_LOGIC;
    signal layer17_out_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal mul_ln1347_fu_393_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1347_reg_7645 : STD_LOGIC_VECTOR (25 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal mul_ln1347_62_fu_389_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1347_62_reg_7649 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1347_63_fu_392_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1347_63_reg_7653 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1347_64_fu_391_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1347_64_reg_7657 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1347_65_fu_406_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1347_65_reg_7661 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1347_66_fu_419_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1347_66_reg_7665 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1347_67_fu_396_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1347_67_reg_7669 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1347_68_fu_412_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1347_68_reg_7673 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1347_69_fu_405_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1347_69_reg_7677 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1347_70_fu_381_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1347_70_reg_7681 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1347_71_fu_383_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1347_71_reg_7685 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1347_72_fu_386_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1347_72_reg_7689 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1347_73_fu_397_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1347_73_reg_7693 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1347_74_fu_410_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1347_74_reg_7697 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1347_75_fu_390_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1347_75_reg_7701 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1347_76_fu_418_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1347_76_reg_7705 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1347_77_fu_395_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1347_77_reg_7709 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1347_78_fu_384_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1347_78_reg_7713 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1347_79_fu_408_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1347_79_reg_7717 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1347_80_fu_382_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1347_80_reg_7721 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1347_81_fu_399_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1347_81_reg_7725 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1347_82_fu_402_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1347_82_reg_7729 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1347_83_fu_411_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1347_83_reg_7733 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1347_84_fu_409_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1347_84_reg_7737 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1347_85_fu_380_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1347_85_reg_7741 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1347_86_fu_403_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1347_86_reg_7745 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1347_87_fu_400_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1347_87_reg_7749 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1347_88_fu_394_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1347_88_reg_7753 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1347_89_fu_407_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1347_89_reg_7757 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1347_90_fu_420_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1347_90_reg_7761 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1347_91_fu_404_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1347_91_reg_7765 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1347_92_fu_398_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1347_92_reg_7769 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1347_93_fu_387_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1347_93_reg_7773 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1347_94_fu_401_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1347_94_reg_7777 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1347_95_fu_415_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1347_95_reg_7781 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1347_96_fu_416_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1347_96_reg_7785 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1347_97_fu_379_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1347_97_reg_7789 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1347_98_fu_385_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1347_98_reg_7793 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1347_99_fu_388_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1347_99_reg_7797 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1347_100_fu_413_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1347_100_reg_7801 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1347_101_fu_414_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1347_101_reg_7805 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1347_102_fu_417_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1347_102_reg_7809 : STD_LOGIC_VECTOR (25 downto 0);
    signal a_V_fu_7814_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal a_V_reg_9157 : STD_LOGIC_VECTOR (15 downto 0);
    signal a_V_101_reg_9162 : STD_LOGIC_VECTOR (15 downto 0);
    signal a_V_102_reg_9167 : STD_LOGIC_VECTOR (15 downto 0);
    signal a_V_62_reg_9172 : STD_LOGIC_VECTOR (15 downto 0);
    signal a_V_63_reg_9177 : STD_LOGIC_VECTOR (15 downto 0);
    signal a_V_64_reg_9182 : STD_LOGIC_VECTOR (15 downto 0);
    signal a_V_65_reg_9187 : STD_LOGIC_VECTOR (15 downto 0);
    signal a_V_66_reg_9192 : STD_LOGIC_VECTOR (15 downto 0);
    signal a_V_67_reg_9197 : STD_LOGIC_VECTOR (15 downto 0);
    signal a_V_68_reg_9202 : STD_LOGIC_VECTOR (15 downto 0);
    signal a_V_69_reg_9207 : STD_LOGIC_VECTOR (15 downto 0);
    signal a_V_70_reg_9212 : STD_LOGIC_VECTOR (15 downto 0);
    signal a_V_71_reg_9217 : STD_LOGIC_VECTOR (15 downto 0);
    signal a_V_72_reg_9222 : STD_LOGIC_VECTOR (15 downto 0);
    signal a_V_73_reg_9227 : STD_LOGIC_VECTOR (15 downto 0);
    signal a_V_74_reg_9232 : STD_LOGIC_VECTOR (15 downto 0);
    signal a_V_75_reg_9237 : STD_LOGIC_VECTOR (15 downto 0);
    signal a_V_76_reg_9242 : STD_LOGIC_VECTOR (15 downto 0);
    signal a_V_77_reg_9247 : STD_LOGIC_VECTOR (15 downto 0);
    signal a_V_78_reg_9252 : STD_LOGIC_VECTOR (15 downto 0);
    signal a_V_79_reg_9257 : STD_LOGIC_VECTOR (15 downto 0);
    signal a_V_80_reg_9262 : STD_LOGIC_VECTOR (15 downto 0);
    signal a_V_81_reg_9267 : STD_LOGIC_VECTOR (15 downto 0);
    signal a_V_82_reg_9272 : STD_LOGIC_VECTOR (15 downto 0);
    signal a_V_83_reg_9277 : STD_LOGIC_VECTOR (15 downto 0);
    signal a_V_84_reg_9282 : STD_LOGIC_VECTOR (15 downto 0);
    signal a_V_85_reg_9287 : STD_LOGIC_VECTOR (15 downto 0);
    signal a_V_86_reg_9292 : STD_LOGIC_VECTOR (15 downto 0);
    signal a_V_87_reg_9297 : STD_LOGIC_VECTOR (15 downto 0);
    signal a_V_88_reg_9302 : STD_LOGIC_VECTOR (15 downto 0);
    signal a_V_89_reg_9307 : STD_LOGIC_VECTOR (15 downto 0);
    signal a_V_90_reg_9312 : STD_LOGIC_VECTOR (15 downto 0);
    signal a_V_91_reg_9317 : STD_LOGIC_VECTOR (15 downto 0);
    signal a_V_92_reg_9322 : STD_LOGIC_VECTOR (15 downto 0);
    signal a_V_93_reg_9327 : STD_LOGIC_VECTOR (15 downto 0);
    signal a_V_94_reg_9332 : STD_LOGIC_VECTOR (15 downto 0);
    signal a_V_95_reg_9337 : STD_LOGIC_VECTOR (15 downto 0);
    signal a_V_96_reg_9342 : STD_LOGIC_VECTOR (15 downto 0);
    signal a_V_97_reg_9347 : STD_LOGIC_VECTOR (15 downto 0);
    signal a_V_98_reg_9352 : STD_LOGIC_VECTOR (15 downto 0);
    signal a_V_99_reg_9357 : STD_LOGIC_VECTOR (15 downto 0);
    signal a_V_100_reg_9362 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal mul_ln1347_97_fu_379_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln1347_85_fu_380_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln1347_70_fu_381_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln1347_80_fu_382_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln1347_71_fu_383_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln1347_78_fu_384_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln1347_98_fu_385_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln1347_72_fu_386_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln1347_93_fu_387_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln1347_99_fu_388_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln1347_62_fu_389_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln1347_75_fu_390_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln1347_64_fu_391_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln1347_63_fu_392_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln1347_fu_393_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln1347_88_fu_394_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln1347_77_fu_395_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln1347_67_fu_396_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln1347_73_fu_397_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln1347_92_fu_398_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln1347_81_fu_399_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln1347_87_fu_400_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln1347_94_fu_401_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln1347_82_fu_402_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln1347_86_fu_403_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln1347_91_fu_404_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln1347_69_fu_405_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln1347_65_fu_406_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln1347_89_fu_407_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln1347_79_fu_408_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln1347_84_fu_409_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln1347_74_fu_410_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln1347_83_fu_411_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln1347_68_fu_412_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln1347_100_fu_413_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln1347_101_fu_414_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln1347_95_fu_415_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln1347_96_fu_416_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln1347_102_fu_417_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln1347_76_fu_418_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln1347_66_fu_419_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln1347_90_fu_420_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal ret_V_fu_8396_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal ret_V_77_fu_8412_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal ret_V_78_fu_8428_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal ret_V_79_fu_8444_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal ret_V_80_fu_8460_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal ret_V_81_fu_8476_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal ret_V_82_fu_8492_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal ret_V_83_fu_8508_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal ret_V_84_fu_8524_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal ret_V_85_fu_8540_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal ret_V_86_fu_8556_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal ret_V_87_fu_8572_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal ret_V_88_fu_8588_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal ret_V_89_fu_8604_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal ret_V_90_fu_8620_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal ret_V_91_fu_8636_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal ret_V_92_fu_8652_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal ret_V_93_fu_8668_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal ret_V_94_fu_8684_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal ret_V_95_fu_8700_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal ret_V_96_fu_8716_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal ret_V_97_fu_8732_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal ret_V_98_fu_8748_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal ret_V_99_fu_8764_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal ret_V_100_fu_8780_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal ret_V_101_fu_8796_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal ret_V_102_fu_8812_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal ret_V_103_fu_8828_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal ret_V_104_fu_8844_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal ret_V_105_fu_8860_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal ret_V_106_fu_8876_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal ret_V_107_fu_8892_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal ret_V_108_fu_8908_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal ret_V_109_fu_8924_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal ret_V_110_fu_8940_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal ret_V_111_fu_8956_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal ret_V_112_fu_8972_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal ret_V_113_fu_8988_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal ret_V_114_fu_9004_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal ret_V_115_fu_9020_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal ret_V_116_fu_9036_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal ret_V_117_fu_9052_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal trunc_ln818_102_fu_9058_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln818_101_fu_9042_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln818_100_fu_9026_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln818_99_fu_9010_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln818_98_fu_8994_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln818_97_fu_8978_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln818_96_fu_8962_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln818_95_fu_8946_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln818_94_fu_8930_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln818_93_fu_8914_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln818_92_fu_8898_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln818_91_fu_8882_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln818_90_fu_8866_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln818_89_fu_8850_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln818_88_fu_8834_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln818_87_fu_8818_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln818_86_fu_8802_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln818_85_fu_8786_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln818_84_fu_8770_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln818_83_fu_8754_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln818_82_fu_8738_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln818_81_fu_8722_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln818_80_fu_8706_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln818_79_fu_8690_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln818_78_fu_8674_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln818_77_fu_8658_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln818_76_fu_8642_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln818_75_fu_8626_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln818_74_fu_8610_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln818_73_fu_8594_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln818_72_fu_8578_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln818_71_fu_8562_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln818_70_fu_8546_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln818_69_fu_8530_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln818_68_fu_8514_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln818_67_fu_8498_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln818_66_fu_8482_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln818_65_fu_8466_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln818_64_fu_8450_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln818_63_fu_8434_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln818_s_fu_8418_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln_fu_8402_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component kernel_wrapper_mul_16s_12ns_26_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        dout : OUT STD_LOGIC_VECTOR (25 downto 0) );
    end component;



begin
    mul_16s_12ns_26_1_1_U961 : component kernel_wrapper_mul_16s_12ns_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 12,
        dout_WIDTH => 26)
    port map (
        din0 => a_V_97_reg_9347,
        din1 => mul_ln1347_97_fu_379_p1,
        dout => mul_ln1347_97_fu_379_p2);

    mul_16s_12ns_26_1_1_U962 : component kernel_wrapper_mul_16s_12ns_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 12,
        dout_WIDTH => 26)
    port map (
        din0 => a_V_85_reg_9287,
        din1 => mul_ln1347_85_fu_380_p1,
        dout => mul_ln1347_85_fu_380_p2);

    mul_16s_12ns_26_1_1_U963 : component kernel_wrapper_mul_16s_12ns_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 12,
        dout_WIDTH => 26)
    port map (
        din0 => a_V_70_reg_9212,
        din1 => mul_ln1347_70_fu_381_p1,
        dout => mul_ln1347_70_fu_381_p2);

    mul_16s_12ns_26_1_1_U964 : component kernel_wrapper_mul_16s_12ns_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 12,
        dout_WIDTH => 26)
    port map (
        din0 => a_V_80_reg_9262,
        din1 => mul_ln1347_80_fu_382_p1,
        dout => mul_ln1347_80_fu_382_p2);

    mul_16s_12ns_26_1_1_U965 : component kernel_wrapper_mul_16s_12ns_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 12,
        dout_WIDTH => 26)
    port map (
        din0 => a_V_71_reg_9217,
        din1 => mul_ln1347_71_fu_383_p1,
        dout => mul_ln1347_71_fu_383_p2);

    mul_16s_12ns_26_1_1_U966 : component kernel_wrapper_mul_16s_12ns_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 12,
        dout_WIDTH => 26)
    port map (
        din0 => a_V_78_reg_9252,
        din1 => mul_ln1347_78_fu_384_p1,
        dout => mul_ln1347_78_fu_384_p2);

    mul_16s_12ns_26_1_1_U967 : component kernel_wrapper_mul_16s_12ns_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 12,
        dout_WIDTH => 26)
    port map (
        din0 => a_V_98_reg_9352,
        din1 => mul_ln1347_98_fu_385_p1,
        dout => mul_ln1347_98_fu_385_p2);

    mul_16s_12ns_26_1_1_U968 : component kernel_wrapper_mul_16s_12ns_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 12,
        dout_WIDTH => 26)
    port map (
        din0 => a_V_72_reg_9222,
        din1 => mul_ln1347_72_fu_386_p1,
        dout => mul_ln1347_72_fu_386_p2);

    mul_16s_12ns_26_1_1_U969 : component kernel_wrapper_mul_16s_12ns_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 12,
        dout_WIDTH => 26)
    port map (
        din0 => a_V_93_reg_9327,
        din1 => mul_ln1347_93_fu_387_p1,
        dout => mul_ln1347_93_fu_387_p2);

    mul_16s_12ns_26_1_1_U970 : component kernel_wrapper_mul_16s_12ns_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 12,
        dout_WIDTH => 26)
    port map (
        din0 => a_V_99_reg_9357,
        din1 => mul_ln1347_99_fu_388_p1,
        dout => mul_ln1347_99_fu_388_p2);

    mul_16s_12ns_26_1_1_U971 : component kernel_wrapper_mul_16s_12ns_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 12,
        dout_WIDTH => 26)
    port map (
        din0 => a_V_62_reg_9172,
        din1 => mul_ln1347_62_fu_389_p1,
        dout => mul_ln1347_62_fu_389_p2);

    mul_16s_12ns_26_1_1_U972 : component kernel_wrapper_mul_16s_12ns_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 12,
        dout_WIDTH => 26)
    port map (
        din0 => a_V_75_reg_9237,
        din1 => mul_ln1347_75_fu_390_p1,
        dout => mul_ln1347_75_fu_390_p2);

    mul_16s_12ns_26_1_1_U973 : component kernel_wrapper_mul_16s_12ns_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 12,
        dout_WIDTH => 26)
    port map (
        din0 => a_V_64_reg_9182,
        din1 => mul_ln1347_64_fu_391_p1,
        dout => mul_ln1347_64_fu_391_p2);

    mul_16s_12ns_26_1_1_U974 : component kernel_wrapper_mul_16s_12ns_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 12,
        dout_WIDTH => 26)
    port map (
        din0 => a_V_63_reg_9177,
        din1 => mul_ln1347_63_fu_392_p1,
        dout => mul_ln1347_63_fu_392_p2);

    mul_16s_12ns_26_1_1_U975 : component kernel_wrapper_mul_16s_12ns_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 12,
        dout_WIDTH => 26)
    port map (
        din0 => a_V_reg_9157,
        din1 => mul_ln1347_fu_393_p1,
        dout => mul_ln1347_fu_393_p2);

    mul_16s_12ns_26_1_1_U976 : component kernel_wrapper_mul_16s_12ns_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 12,
        dout_WIDTH => 26)
    port map (
        din0 => a_V_88_reg_9302,
        din1 => mul_ln1347_88_fu_394_p1,
        dout => mul_ln1347_88_fu_394_p2);

    mul_16s_12ns_26_1_1_U977 : component kernel_wrapper_mul_16s_12ns_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 12,
        dout_WIDTH => 26)
    port map (
        din0 => a_V_77_reg_9247,
        din1 => mul_ln1347_77_fu_395_p1,
        dout => mul_ln1347_77_fu_395_p2);

    mul_16s_12ns_26_1_1_U978 : component kernel_wrapper_mul_16s_12ns_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 12,
        dout_WIDTH => 26)
    port map (
        din0 => a_V_67_reg_9197,
        din1 => mul_ln1347_67_fu_396_p1,
        dout => mul_ln1347_67_fu_396_p2);

    mul_16s_12ns_26_1_1_U979 : component kernel_wrapper_mul_16s_12ns_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 12,
        dout_WIDTH => 26)
    port map (
        din0 => a_V_73_reg_9227,
        din1 => mul_ln1347_73_fu_397_p1,
        dout => mul_ln1347_73_fu_397_p2);

    mul_16s_12ns_26_1_1_U980 : component kernel_wrapper_mul_16s_12ns_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 12,
        dout_WIDTH => 26)
    port map (
        din0 => a_V_92_reg_9322,
        din1 => mul_ln1347_92_fu_398_p1,
        dout => mul_ln1347_92_fu_398_p2);

    mul_16s_12ns_26_1_1_U981 : component kernel_wrapper_mul_16s_12ns_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 12,
        dout_WIDTH => 26)
    port map (
        din0 => a_V_81_reg_9267,
        din1 => mul_ln1347_81_fu_399_p1,
        dout => mul_ln1347_81_fu_399_p2);

    mul_16s_12ns_26_1_1_U982 : component kernel_wrapper_mul_16s_12ns_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 12,
        dout_WIDTH => 26)
    port map (
        din0 => a_V_87_reg_9297,
        din1 => mul_ln1347_87_fu_400_p1,
        dout => mul_ln1347_87_fu_400_p2);

    mul_16s_12ns_26_1_1_U983 : component kernel_wrapper_mul_16s_12ns_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 12,
        dout_WIDTH => 26)
    port map (
        din0 => a_V_94_reg_9332,
        din1 => mul_ln1347_94_fu_401_p1,
        dout => mul_ln1347_94_fu_401_p2);

    mul_16s_12ns_26_1_1_U984 : component kernel_wrapper_mul_16s_12ns_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 12,
        dout_WIDTH => 26)
    port map (
        din0 => a_V_82_reg_9272,
        din1 => mul_ln1347_82_fu_402_p1,
        dout => mul_ln1347_82_fu_402_p2);

    mul_16s_12ns_26_1_1_U985 : component kernel_wrapper_mul_16s_12ns_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 12,
        dout_WIDTH => 26)
    port map (
        din0 => a_V_86_reg_9292,
        din1 => mul_ln1347_86_fu_403_p1,
        dout => mul_ln1347_86_fu_403_p2);

    mul_16s_12ns_26_1_1_U986 : component kernel_wrapper_mul_16s_12ns_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 12,
        dout_WIDTH => 26)
    port map (
        din0 => a_V_91_reg_9317,
        din1 => mul_ln1347_91_fu_404_p1,
        dout => mul_ln1347_91_fu_404_p2);

    mul_16s_12ns_26_1_1_U987 : component kernel_wrapper_mul_16s_12ns_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 12,
        dout_WIDTH => 26)
    port map (
        din0 => a_V_69_reg_9207,
        din1 => mul_ln1347_69_fu_405_p1,
        dout => mul_ln1347_69_fu_405_p2);

    mul_16s_12ns_26_1_1_U988 : component kernel_wrapper_mul_16s_12ns_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 12,
        dout_WIDTH => 26)
    port map (
        din0 => a_V_65_reg_9187,
        din1 => mul_ln1347_65_fu_406_p1,
        dout => mul_ln1347_65_fu_406_p2);

    mul_16s_12ns_26_1_1_U989 : component kernel_wrapper_mul_16s_12ns_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 12,
        dout_WIDTH => 26)
    port map (
        din0 => a_V_89_reg_9307,
        din1 => mul_ln1347_89_fu_407_p1,
        dout => mul_ln1347_89_fu_407_p2);

    mul_16s_12ns_26_1_1_U990 : component kernel_wrapper_mul_16s_12ns_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 12,
        dout_WIDTH => 26)
    port map (
        din0 => a_V_79_reg_9257,
        din1 => mul_ln1347_79_fu_408_p1,
        dout => mul_ln1347_79_fu_408_p2);

    mul_16s_12ns_26_1_1_U991 : component kernel_wrapper_mul_16s_12ns_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 12,
        dout_WIDTH => 26)
    port map (
        din0 => a_V_84_reg_9282,
        din1 => mul_ln1347_84_fu_409_p1,
        dout => mul_ln1347_84_fu_409_p2);

    mul_16s_12ns_26_1_1_U992 : component kernel_wrapper_mul_16s_12ns_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 12,
        dout_WIDTH => 26)
    port map (
        din0 => a_V_74_reg_9232,
        din1 => mul_ln1347_74_fu_410_p1,
        dout => mul_ln1347_74_fu_410_p2);

    mul_16s_12ns_26_1_1_U993 : component kernel_wrapper_mul_16s_12ns_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 12,
        dout_WIDTH => 26)
    port map (
        din0 => a_V_83_reg_9277,
        din1 => mul_ln1347_83_fu_411_p1,
        dout => mul_ln1347_83_fu_411_p2);

    mul_16s_12ns_26_1_1_U994 : component kernel_wrapper_mul_16s_12ns_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 12,
        dout_WIDTH => 26)
    port map (
        din0 => a_V_68_reg_9202,
        din1 => mul_ln1347_68_fu_412_p1,
        dout => mul_ln1347_68_fu_412_p2);

    mul_16s_12ns_26_1_1_U995 : component kernel_wrapper_mul_16s_12ns_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 12,
        dout_WIDTH => 26)
    port map (
        din0 => a_V_100_reg_9362,
        din1 => mul_ln1347_100_fu_413_p1,
        dout => mul_ln1347_100_fu_413_p2);

    mul_16s_12ns_26_1_1_U996 : component kernel_wrapper_mul_16s_12ns_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 12,
        dout_WIDTH => 26)
    port map (
        din0 => a_V_101_reg_9162,
        din1 => mul_ln1347_101_fu_414_p1,
        dout => mul_ln1347_101_fu_414_p2);

    mul_16s_12ns_26_1_1_U997 : component kernel_wrapper_mul_16s_12ns_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 12,
        dout_WIDTH => 26)
    port map (
        din0 => a_V_95_reg_9337,
        din1 => mul_ln1347_95_fu_415_p1,
        dout => mul_ln1347_95_fu_415_p2);

    mul_16s_12ns_26_1_1_U998 : component kernel_wrapper_mul_16s_12ns_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 12,
        dout_WIDTH => 26)
    port map (
        din0 => a_V_96_reg_9342,
        din1 => mul_ln1347_96_fu_416_p1,
        dout => mul_ln1347_96_fu_416_p2);

    mul_16s_12ns_26_1_1_U999 : component kernel_wrapper_mul_16s_12ns_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 12,
        dout_WIDTH => 26)
    port map (
        din0 => a_V_102_reg_9167,
        din1 => mul_ln1347_102_fu_417_p1,
        dout => mul_ln1347_102_fu_417_p2);

    mul_16s_12ns_26_1_1_U1000 : component kernel_wrapper_mul_16s_12ns_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 12,
        dout_WIDTH => 26)
    port map (
        din0 => a_V_76_reg_9242,
        din1 => mul_ln1347_76_fu_418_p1,
        dout => mul_ln1347_76_fu_418_p2);

    mul_16s_12ns_26_1_1_U1001 : component kernel_wrapper_mul_16s_12ns_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 12,
        dout_WIDTH => 26)
    port map (
        din0 => a_V_66_reg_9192,
        din1 => mul_ln1347_66_fu_419_p1,
        dout => mul_ln1347_66_fu_419_p2);

    mul_16s_12ns_26_1_1_U1002 : component kernel_wrapper_mul_16s_12ns_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 12,
        dout_WIDTH => 26)
    port map (
        din0 => a_V_90_reg_9312,
        din1 => mul_ln1347_90_fu_420_p1,
        dout => mul_ln1347_90_fu_420_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((layer17_out_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((real_start = ap_const_logic_1) and (internal_ap_ready = ap_const_logic_0))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                a_V_100_reg_9362 <= layer15_out_dout(639 downto 624);
                a_V_101_reg_9162 <= layer15_out_dout(655 downto 640);
                a_V_102_reg_9167 <= layer15_out_dout(671 downto 656);
                a_V_62_reg_9172 <= layer15_out_dout(31 downto 16);
                a_V_63_reg_9177 <= layer15_out_dout(47 downto 32);
                a_V_64_reg_9182 <= layer15_out_dout(63 downto 48);
                a_V_65_reg_9187 <= layer15_out_dout(79 downto 64);
                a_V_66_reg_9192 <= layer15_out_dout(95 downto 80);
                a_V_67_reg_9197 <= layer15_out_dout(111 downto 96);
                a_V_68_reg_9202 <= layer15_out_dout(127 downto 112);
                a_V_69_reg_9207 <= layer15_out_dout(143 downto 128);
                a_V_70_reg_9212 <= layer15_out_dout(159 downto 144);
                a_V_71_reg_9217 <= layer15_out_dout(175 downto 160);
                a_V_72_reg_9222 <= layer15_out_dout(191 downto 176);
                a_V_73_reg_9227 <= layer15_out_dout(207 downto 192);
                a_V_74_reg_9232 <= layer15_out_dout(223 downto 208);
                a_V_75_reg_9237 <= layer15_out_dout(239 downto 224);
                a_V_76_reg_9242 <= layer15_out_dout(255 downto 240);
                a_V_77_reg_9247 <= layer15_out_dout(271 downto 256);
                a_V_78_reg_9252 <= layer15_out_dout(287 downto 272);
                a_V_79_reg_9257 <= layer15_out_dout(303 downto 288);
                a_V_80_reg_9262 <= layer15_out_dout(319 downto 304);
                a_V_81_reg_9267 <= layer15_out_dout(335 downto 320);
                a_V_82_reg_9272 <= layer15_out_dout(351 downto 336);
                a_V_83_reg_9277 <= layer15_out_dout(367 downto 352);
                a_V_84_reg_9282 <= layer15_out_dout(383 downto 368);
                a_V_85_reg_9287 <= layer15_out_dout(399 downto 384);
                a_V_86_reg_9292 <= layer15_out_dout(415 downto 400);
                a_V_87_reg_9297 <= layer15_out_dout(431 downto 416);
                a_V_88_reg_9302 <= layer15_out_dout(447 downto 432);
                a_V_89_reg_9307 <= layer15_out_dout(463 downto 448);
                a_V_90_reg_9312 <= layer15_out_dout(479 downto 464);
                a_V_91_reg_9317 <= layer15_out_dout(495 downto 480);
                a_V_92_reg_9322 <= layer15_out_dout(511 downto 496);
                a_V_93_reg_9327 <= layer15_out_dout(527 downto 512);
                a_V_94_reg_9332 <= layer15_out_dout(543 downto 528);
                a_V_95_reg_9337 <= layer15_out_dout(559 downto 544);
                a_V_96_reg_9342 <= layer15_out_dout(575 downto 560);
                a_V_97_reg_9347 <= layer15_out_dout(591 downto 576);
                a_V_98_reg_9352 <= layer15_out_dout(607 downto 592);
                a_V_99_reg_9357 <= layer15_out_dout(623 downto 608);
                a_V_reg_9157 <= a_V_fu_7814_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                mul_ln1347_100_reg_7801 <= mul_ln1347_100_fu_413_p2;
                mul_ln1347_101_reg_7805 <= mul_ln1347_101_fu_414_p2;
                mul_ln1347_102_reg_7809 <= mul_ln1347_102_fu_417_p2;
                mul_ln1347_62_reg_7649 <= mul_ln1347_62_fu_389_p2;
                mul_ln1347_63_reg_7653 <= mul_ln1347_63_fu_392_p2;
                mul_ln1347_64_reg_7657 <= mul_ln1347_64_fu_391_p2;
                mul_ln1347_65_reg_7661 <= mul_ln1347_65_fu_406_p2;
                mul_ln1347_66_reg_7665 <= mul_ln1347_66_fu_419_p2;
                mul_ln1347_67_reg_7669 <= mul_ln1347_67_fu_396_p2;
                mul_ln1347_68_reg_7673 <= mul_ln1347_68_fu_412_p2;
                mul_ln1347_69_reg_7677 <= mul_ln1347_69_fu_405_p2;
                mul_ln1347_70_reg_7681 <= mul_ln1347_70_fu_381_p2;
                mul_ln1347_71_reg_7685 <= mul_ln1347_71_fu_383_p2;
                mul_ln1347_72_reg_7689 <= mul_ln1347_72_fu_386_p2;
                mul_ln1347_73_reg_7693 <= mul_ln1347_73_fu_397_p2;
                mul_ln1347_74_reg_7697 <= mul_ln1347_74_fu_410_p2;
                mul_ln1347_75_reg_7701 <= mul_ln1347_75_fu_390_p2;
                mul_ln1347_76_reg_7705 <= mul_ln1347_76_fu_418_p2;
                mul_ln1347_77_reg_7709 <= mul_ln1347_77_fu_395_p2;
                mul_ln1347_78_reg_7713 <= mul_ln1347_78_fu_384_p2;
                mul_ln1347_79_reg_7717 <= mul_ln1347_79_fu_408_p2;
                mul_ln1347_80_reg_7721 <= mul_ln1347_80_fu_382_p2;
                mul_ln1347_81_reg_7725 <= mul_ln1347_81_fu_399_p2;
                mul_ln1347_82_reg_7729 <= mul_ln1347_82_fu_402_p2;
                mul_ln1347_83_reg_7733 <= mul_ln1347_83_fu_411_p2;
                mul_ln1347_84_reg_7737 <= mul_ln1347_84_fu_409_p2;
                mul_ln1347_85_reg_7741 <= mul_ln1347_85_fu_380_p2;
                mul_ln1347_86_reg_7745 <= mul_ln1347_86_fu_403_p2;
                mul_ln1347_87_reg_7749 <= mul_ln1347_87_fu_400_p2;
                mul_ln1347_88_reg_7753 <= mul_ln1347_88_fu_394_p2;
                mul_ln1347_89_reg_7757 <= mul_ln1347_89_fu_407_p2;
                mul_ln1347_90_reg_7761 <= mul_ln1347_90_fu_420_p2;
                mul_ln1347_91_reg_7765 <= mul_ln1347_91_fu_404_p2;
                mul_ln1347_92_reg_7769 <= mul_ln1347_92_fu_398_p2;
                mul_ln1347_93_reg_7773 <= mul_ln1347_93_fu_387_p2;
                mul_ln1347_94_reg_7777 <= mul_ln1347_94_fu_401_p2;
                mul_ln1347_95_reg_7781 <= mul_ln1347_95_fu_415_p2;
                mul_ln1347_96_reg_7785 <= mul_ln1347_96_fu_416_p2;
                mul_ln1347_97_reg_7789 <= mul_ln1347_97_fu_379_p2;
                mul_ln1347_98_reg_7793 <= mul_ln1347_98_fu_385_p2;
                mul_ln1347_99_reg_7797 <= mul_ln1347_99_fu_388_p2;
                mul_ln1347_reg_7645 <= mul_ln1347_fu_393_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, layer15_out_empty_n, layer17_out_full_n, ap_CS_fsm_state3)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((real_start = ap_const_logic_0) or (layer15_out_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((layer17_out_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    a_V_fu_7814_p1 <= layer15_out_dout(16 - 1 downto 0);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_ST_fsm_state1_blk_assign_proc : process(real_start, ap_done_reg, layer15_out_empty_n)
    begin
        if (((real_start = ap_const_logic_0) or (layer15_out_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;

    ap_ST_fsm_state3_blk_assign_proc : process(layer17_out_full_n)
    begin
        if ((layer17_out_full_n = ap_const_logic_0)) then 
            ap_ST_fsm_state3_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state3_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg, layer15_out_empty_n)
    begin
                ap_block_state1 <= ((real_start = ap_const_logic_0) or (layer15_out_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_done_reg, layer17_out_full_n, ap_CS_fsm_state3)
    begin
        if (((layer17_out_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;

    internal_ap_ready_assign_proc : process(layer17_out_full_n, ap_CS_fsm_state3)
    begin
        if (((layer17_out_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    layer15_out_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, layer15_out_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            layer15_out_blk_n <= layer15_out_empty_n;
        else 
            layer15_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    layer15_out_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, layer15_out_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (layer15_out_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            layer15_out_read <= ap_const_logic_1;
        else 
            layer15_out_read <= ap_const_logic_0;
        end if; 
    end process;


    layer17_out_blk_n_assign_proc : process(layer17_out_full_n, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            layer17_out_blk_n <= layer17_out_full_n;
        else 
            layer17_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    layer17_out_din <= (((((((((((((((((((((((((((((((((((((((((trunc_ln818_102_fu_9058_p4 & trunc_ln818_101_fu_9042_p4) & trunc_ln818_100_fu_9026_p4) & trunc_ln818_99_fu_9010_p4) & trunc_ln818_98_fu_8994_p4) & trunc_ln818_97_fu_8978_p4) & trunc_ln818_96_fu_8962_p4) & trunc_ln818_95_fu_8946_p4) & trunc_ln818_94_fu_8930_p4) & trunc_ln818_93_fu_8914_p4) & trunc_ln818_92_fu_8898_p4) & trunc_ln818_91_fu_8882_p4) & trunc_ln818_90_fu_8866_p4) & trunc_ln818_89_fu_8850_p4) & trunc_ln818_88_fu_8834_p4) & trunc_ln818_87_fu_8818_p4) & trunc_ln818_86_fu_8802_p4) & trunc_ln818_85_fu_8786_p4) & trunc_ln818_84_fu_8770_p4) & trunc_ln818_83_fu_8754_p4) & trunc_ln818_82_fu_8738_p4) & trunc_ln818_81_fu_8722_p4) & trunc_ln818_80_fu_8706_p4) & trunc_ln818_79_fu_8690_p4) & trunc_ln818_78_fu_8674_p4) & trunc_ln818_77_fu_8658_p4) & trunc_ln818_76_fu_8642_p4) & trunc_ln818_75_fu_8626_p4) & trunc_ln818_74_fu_8610_p4) & trunc_ln818_73_fu_8594_p4) & trunc_ln818_72_fu_8578_p4) & trunc_ln818_71_fu_8562_p4) & trunc_ln818_70_fu_8546_p4) & trunc_ln818_69_fu_8530_p4) & trunc_ln818_68_fu_8514_p4) & trunc_ln818_67_fu_8498_p4) & trunc_ln818_66_fu_8482_p4) & trunc_ln818_65_fu_8466_p4) & trunc_ln818_64_fu_8450_p4) & trunc_ln818_63_fu_8434_p4) & trunc_ln818_s_fu_8418_p4) & trunc_ln_fu_8402_p4);

    layer17_out_write_assign_proc : process(layer17_out_full_n, ap_CS_fsm_state3)
    begin
        if (((layer17_out_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            layer17_out_write <= ap_const_logic_1;
        else 
            layer17_out_write <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln1347_100_fu_413_p1 <= ap_const_lv26_572(12 - 1 downto 0);
    mul_ln1347_101_fu_414_p1 <= ap_const_lv26_519(12 - 1 downto 0);
    mul_ln1347_102_fu_417_p1 <= ap_const_lv26_666(12 - 1 downto 0);
    mul_ln1347_62_fu_389_p1 <= ap_const_lv26_4BC(12 - 1 downto 0);
    mul_ln1347_63_fu_392_p1 <= ap_const_lv26_5A1(12 - 1 downto 0);
    mul_ln1347_64_fu_391_p1 <= ap_const_lv26_6C4(12 - 1 downto 0);
    mul_ln1347_65_fu_406_p1 <= ap_const_lv26_67D(12 - 1 downto 0);
    mul_ln1347_66_fu_419_p1 <= ap_const_lv26_48E(12 - 1 downto 0);
    mul_ln1347_67_fu_396_p1 <= ap_const_lv26_4F8(12 - 1 downto 0);
    mul_ln1347_68_fu_412_p1 <= ap_const_lv26_51E(12 - 1 downto 0);
    mul_ln1347_69_fu_405_p1 <= ap_const_lv26_51D(12 - 1 downto 0);
    mul_ln1347_70_fu_381_p1 <= ap_const_lv26_57D(12 - 1 downto 0);
    mul_ln1347_71_fu_383_p1 <= ap_const_lv26_523(12 - 1 downto 0);
    mul_ln1347_72_fu_386_p1 <= ap_const_lv26_56A(12 - 1 downto 0);
    mul_ln1347_73_fu_397_p1 <= ap_const_lv26_5F6(12 - 1 downto 0);
    mul_ln1347_74_fu_410_p1 <= ap_const_lv26_41F(12 - 1 downto 0);
    mul_ln1347_75_fu_390_p1 <= ap_const_lv26_502(12 - 1 downto 0);
    mul_ln1347_76_fu_418_p1 <= ap_const_lv26_578(12 - 1 downto 0);
    mul_ln1347_77_fu_395_p1 <= ap_const_lv26_659(12 - 1 downto 0);
    mul_ln1347_78_fu_384_p1 <= ap_const_lv26_53D(12 - 1 downto 0);
    mul_ln1347_79_fu_408_p1 <= ap_const_lv26_697(12 - 1 downto 0);
    mul_ln1347_80_fu_382_p1 <= ap_const_lv26_4DA(12 - 1 downto 0);
    mul_ln1347_81_fu_399_p1 <= ap_const_lv26_521(12 - 1 downto 0);
    mul_ln1347_82_fu_402_p1 <= ap_const_lv26_607(12 - 1 downto 0);
    mul_ln1347_83_fu_411_p1 <= ap_const_lv26_614(12 - 1 downto 0);
    mul_ln1347_84_fu_409_p1 <= ap_const_lv26_6EE(12 - 1 downto 0);
    mul_ln1347_85_fu_380_p1 <= ap_const_lv26_589(12 - 1 downto 0);
    mul_ln1347_86_fu_403_p1 <= ap_const_lv26_5D3(12 - 1 downto 0);
    mul_ln1347_87_fu_400_p1 <= ap_const_lv26_5DB(12 - 1 downto 0);
    mul_ln1347_88_fu_394_p1 <= ap_const_lv26_532(12 - 1 downto 0);
    mul_ln1347_89_fu_407_p1 <= ap_const_lv26_5A2(12 - 1 downto 0);
    mul_ln1347_90_fu_420_p1 <= ap_const_lv26_5ED(12 - 1 downto 0);
    mul_ln1347_91_fu_404_p1 <= ap_const_lv26_50B(12 - 1 downto 0);
    mul_ln1347_92_fu_398_p1 <= ap_const_lv26_51C(12 - 1 downto 0);
    mul_ln1347_93_fu_387_p1 <= ap_const_lv26_621(12 - 1 downto 0);
    mul_ln1347_94_fu_401_p1 <= ap_const_lv26_470(12 - 1 downto 0);
    mul_ln1347_95_fu_415_p1 <= ap_const_lv26_65C(12 - 1 downto 0);
    mul_ln1347_96_fu_416_p1 <= ap_const_lv26_527(12 - 1 downto 0);
    mul_ln1347_97_fu_379_p1 <= ap_const_lv26_69F(12 - 1 downto 0);
    mul_ln1347_98_fu_385_p1 <= ap_const_lv26_541(12 - 1 downto 0);
    mul_ln1347_99_fu_388_p1 <= ap_const_lv26_584(12 - 1 downto 0);
    mul_ln1347_fu_393_p1 <= ap_const_lv26_5A9(12 - 1 downto 0);

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    ret_V_100_fu_8780_p2 <= std_logic_vector(unsigned(mul_ln1347_85_reg_7741) + unsigned(ap_const_lv26_3E70000));
    ret_V_101_fu_8796_p2 <= std_logic_vector(unsigned(mul_ln1347_86_reg_7745) + unsigned(ap_const_lv26_3F6D000));
    ret_V_102_fu_8812_p2 <= std_logic_vector(unsigned(mul_ln1347_87_reg_7749) + unsigned(ap_const_lv26_C4000));
    ret_V_103_fu_8828_p2 <= std_logic_vector(unsigned(mul_ln1347_88_reg_7753) + unsigned(ap_const_lv26_3F5FC00));
    ret_V_104_fu_8844_p2 <= std_logic_vector(unsigned(mul_ln1347_89_reg_7757) + unsigned(ap_const_lv26_F2800));
    ret_V_105_fu_8860_p2 <= std_logic_vector(unsigned(mul_ln1347_90_reg_7761) + unsigned(ap_const_lv26_3EE6000));
    ret_V_106_fu_8876_p2 <= std_logic_vector(unsigned(mul_ln1347_91_reg_7765) + unsigned(ap_const_lv26_41000));
    ret_V_107_fu_8892_p2 <= std_logic_vector(unsigned(mul_ln1347_92_reg_7769) + unsigned(ap_const_lv26_43C00));
    ret_V_108_fu_8908_p2 <= std_logic_vector(unsigned(mul_ln1347_93_reg_7773) + unsigned(ap_const_lv26_3FB8800));
    ret_V_109_fu_8924_p2 <= std_logic_vector(unsigned(mul_ln1347_94_reg_7777) + unsigned(ap_const_lv26_B400));
    ret_V_110_fu_8940_p2 <= std_logic_vector(unsigned(mul_ln1347_95_reg_7781) + unsigned(ap_const_lv26_3EB7C00));
    ret_V_111_fu_8956_p2 <= std_logic_vector(unsigned(mul_ln1347_96_reg_7785) + unsigned(ap_const_lv26_83000));
    ret_V_112_fu_8972_p2 <= std_logic_vector(unsigned(mul_ln1347_97_reg_7789) + unsigned(ap_const_lv26_3F8A800));
    ret_V_113_fu_8988_p2 <= std_logic_vector(unsigned(mul_ln1347_98_reg_7793) + unsigned(ap_const_lv26_A6000));
    ret_V_114_fu_9004_p2 <= std_logic_vector(unsigned(mul_ln1347_99_reg_7797) + unsigned(ap_const_lv26_3F12800));
    ret_V_115_fu_9020_p2 <= std_logic_vector(unsigned(mul_ln1347_100_reg_7801) + unsigned(ap_const_lv26_3F73400));
    ret_V_116_fu_9036_p2 <= std_logic_vector(unsigned(mul_ln1347_101_reg_7805) + unsigned(ap_const_lv26_94800));
    ret_V_117_fu_9052_p2 <= std_logic_vector(unsigned(mul_ln1347_102_reg_7809) + unsigned(ap_const_lv26_47000));
    ret_V_77_fu_8412_p2 <= std_logic_vector(unsigned(mul_ln1347_62_reg_7649) + unsigned(ap_const_lv26_3FA9C00));
    ret_V_78_fu_8428_p2 <= std_logic_vector(unsigned(mul_ln1347_63_reg_7653) + unsigned(ap_const_lv26_BFC00));
    ret_V_79_fu_8444_p2 <= std_logic_vector(unsigned(mul_ln1347_64_reg_7657) + unsigned(ap_const_lv26_4E800));
    ret_V_80_fu_8460_p2 <= std_logic_vector(unsigned(mul_ln1347_65_reg_7661) + unsigned(ap_const_lv26_2BC00));
    ret_V_81_fu_8476_p2 <= std_logic_vector(unsigned(mul_ln1347_66_reg_7665) + unsigned(ap_const_lv26_1C00));
    ret_V_82_fu_8492_p2 <= std_logic_vector(unsigned(mul_ln1347_67_reg_7669) + unsigned(ap_const_lv26_62000));
    ret_V_83_fu_8508_p2 <= std_logic_vector(unsigned(mul_ln1347_68_reg_7673) + unsigned(ap_const_lv26_49800));
    ret_V_84_fu_8524_p2 <= std_logic_vector(unsigned(mul_ln1347_69_reg_7677) + unsigned(ap_const_lv26_3F99400));
    ret_V_85_fu_8540_p2 <= std_logic_vector(unsigned(mul_ln1347_70_reg_7681) + unsigned(ap_const_lv26_3FFD000));
    ret_V_86_fu_8556_p2 <= std_logic_vector(unsigned(mul_ln1347_71_reg_7685) + unsigned(ap_const_lv26_3E96800));
    ret_V_87_fu_8572_p2 <= std_logic_vector(unsigned(mul_ln1347_72_reg_7689) + unsigned(ap_const_lv26_9E400));
    ret_V_88_fu_8588_p2 <= std_logic_vector(unsigned(mul_ln1347_73_reg_7693) + unsigned(ap_const_lv26_3F400));
    ret_V_89_fu_8604_p2 <= std_logic_vector(unsigned(mul_ln1347_74_reg_7697) + unsigned(ap_const_lv26_3FAEC00));
    ret_V_90_fu_8620_p2 <= std_logic_vector(unsigned(mul_ln1347_75_reg_7701) + unsigned(ap_const_lv26_3E800));
    ret_V_91_fu_8636_p2 <= std_logic_vector(unsigned(mul_ln1347_76_reg_7705) + unsigned(ap_const_lv26_3F82800));
    ret_V_92_fu_8652_p2 <= std_logic_vector(unsigned(mul_ln1347_77_reg_7709) + unsigned(ap_const_lv26_3F4FC00));
    ret_V_93_fu_8668_p2 <= std_logic_vector(unsigned(mul_ln1347_78_reg_7713) + unsigned(ap_const_lv26_3E5E000));
    ret_V_94_fu_8684_p2 <= std_logic_vector(unsigned(mul_ln1347_79_reg_7717) + unsigned(ap_const_lv26_3F0DC00));
    ret_V_95_fu_8700_p2 <= std_logic_vector(unsigned(mul_ln1347_80_reg_7721) + unsigned(ap_const_lv26_3B000));
    ret_V_96_fu_8716_p2 <= std_logic_vector(unsigned(mul_ln1347_81_reg_7725) + unsigned(ap_const_lv26_3E3D400));
    ret_V_97_fu_8732_p2 <= std_logic_vector(unsigned(mul_ln1347_82_reg_7729) + unsigned(ap_const_lv26_FE800));
    ret_V_98_fu_8748_p2 <= std_logic_vector(unsigned(mul_ln1347_83_reg_7733) + unsigned(ap_const_lv26_3F96400));
    ret_V_99_fu_8764_p2 <= std_logic_vector(unsigned(mul_ln1347_84_reg_7737) + unsigned(ap_const_lv26_3EDF800));
    ret_V_fu_8396_p2 <= std_logic_vector(unsigned(mul_ln1347_reg_7645) + unsigned(ap_const_lv26_21C00));
    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((real_start = ap_const_logic_1) and (start_once_reg = ap_const_logic_0))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln818_100_fu_9026_p4 <= ret_V_115_fu_9020_p2(25 downto 10);
    trunc_ln818_101_fu_9042_p4 <= ret_V_116_fu_9036_p2(25 downto 10);
    trunc_ln818_102_fu_9058_p4 <= ret_V_117_fu_9052_p2(25 downto 10);
    trunc_ln818_63_fu_8434_p4 <= ret_V_78_fu_8428_p2(25 downto 10);
    trunc_ln818_64_fu_8450_p4 <= ret_V_79_fu_8444_p2(25 downto 10);
    trunc_ln818_65_fu_8466_p4 <= ret_V_80_fu_8460_p2(25 downto 10);
    trunc_ln818_66_fu_8482_p4 <= ret_V_81_fu_8476_p2(25 downto 10);
    trunc_ln818_67_fu_8498_p4 <= ret_V_82_fu_8492_p2(25 downto 10);
    trunc_ln818_68_fu_8514_p4 <= ret_V_83_fu_8508_p2(25 downto 10);
    trunc_ln818_69_fu_8530_p4 <= ret_V_84_fu_8524_p2(25 downto 10);
    trunc_ln818_70_fu_8546_p4 <= ret_V_85_fu_8540_p2(25 downto 10);
    trunc_ln818_71_fu_8562_p4 <= ret_V_86_fu_8556_p2(25 downto 10);
    trunc_ln818_72_fu_8578_p4 <= ret_V_87_fu_8572_p2(25 downto 10);
    trunc_ln818_73_fu_8594_p4 <= ret_V_88_fu_8588_p2(25 downto 10);
    trunc_ln818_74_fu_8610_p4 <= ret_V_89_fu_8604_p2(25 downto 10);
    trunc_ln818_75_fu_8626_p4 <= ret_V_90_fu_8620_p2(25 downto 10);
    trunc_ln818_76_fu_8642_p4 <= ret_V_91_fu_8636_p2(25 downto 10);
    trunc_ln818_77_fu_8658_p4 <= ret_V_92_fu_8652_p2(25 downto 10);
    trunc_ln818_78_fu_8674_p4 <= ret_V_93_fu_8668_p2(25 downto 10);
    trunc_ln818_79_fu_8690_p4 <= ret_V_94_fu_8684_p2(25 downto 10);
    trunc_ln818_80_fu_8706_p4 <= ret_V_95_fu_8700_p2(25 downto 10);
    trunc_ln818_81_fu_8722_p4 <= ret_V_96_fu_8716_p2(25 downto 10);
    trunc_ln818_82_fu_8738_p4 <= ret_V_97_fu_8732_p2(25 downto 10);
    trunc_ln818_83_fu_8754_p4 <= ret_V_98_fu_8748_p2(25 downto 10);
    trunc_ln818_84_fu_8770_p4 <= ret_V_99_fu_8764_p2(25 downto 10);
    trunc_ln818_85_fu_8786_p4 <= ret_V_100_fu_8780_p2(25 downto 10);
    trunc_ln818_86_fu_8802_p4 <= ret_V_101_fu_8796_p2(25 downto 10);
    trunc_ln818_87_fu_8818_p4 <= ret_V_102_fu_8812_p2(25 downto 10);
    trunc_ln818_88_fu_8834_p4 <= ret_V_103_fu_8828_p2(25 downto 10);
    trunc_ln818_89_fu_8850_p4 <= ret_V_104_fu_8844_p2(25 downto 10);
    trunc_ln818_90_fu_8866_p4 <= ret_V_105_fu_8860_p2(25 downto 10);
    trunc_ln818_91_fu_8882_p4 <= ret_V_106_fu_8876_p2(25 downto 10);
    trunc_ln818_92_fu_8898_p4 <= ret_V_107_fu_8892_p2(25 downto 10);
    trunc_ln818_93_fu_8914_p4 <= ret_V_108_fu_8908_p2(25 downto 10);
    trunc_ln818_94_fu_8930_p4 <= ret_V_109_fu_8924_p2(25 downto 10);
    trunc_ln818_95_fu_8946_p4 <= ret_V_110_fu_8940_p2(25 downto 10);
    trunc_ln818_96_fu_8962_p4 <= ret_V_111_fu_8956_p2(25 downto 10);
    trunc_ln818_97_fu_8978_p4 <= ret_V_112_fu_8972_p2(25 downto 10);
    trunc_ln818_98_fu_8994_p4 <= ret_V_113_fu_8988_p2(25 downto 10);
    trunc_ln818_99_fu_9010_p4 <= ret_V_114_fu_9004_p2(25 downto 10);
    trunc_ln818_s_fu_8418_p4 <= ret_V_77_fu_8412_p2(25 downto 10);
    trunc_ln_fu_8402_p4 <= ret_V_fu_8396_p2(25 downto 10);
end behav;
